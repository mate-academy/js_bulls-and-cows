'use strict';

/**
 * Implement bullsAndCows function:
 *
 * Function takes 2 strings: generatedNumber (generated by computer) and
 * enteredNumber (entered by player) and returns count of bulls and cows
 * according to rules (see readme.md). Each parameter should be exactly 4 digits
 * long.
 *
 * Function returns result as object with properties 'bulls' and 'cows' where
 * 'result.bulls' is a count of bulls and result.cows is a count of cows.
 *
 * If wrong parameter enteredNumber is given function returns undefined.
 *
 * bullsAndCows('1234', '1345') === [1, 2]
 * bullsAndCows('1234', '1234') === [4, 0]
 * bullsAndCows('1234', '') === undefined
 * bullsAndCows('1234', '12') === undefined
 * bullsAndCows('1234', 'asdf') === undefined
 * bullsAndCows('1234', '1234567890') === undefined
 *
 * @param {string} generatedNumber - generated by computer
 * @param {string} enteredNumber - entered by a player
 *
 * @return {object} - like {bulls: 0, cows: 0}
 */
function bullsAndCows(generatedNumber, enteredNumber) {
  if (!(+enteredNumber < 9877 && +enteredNumber > 122)) {
    return undefined;
  }

  const compNumber = {};
  const playerNumber = {};
  const compSoleNumber = {};
  const playerSoleNumber = {};

  let cows = 0;
  let bulls = 0;

  for (let i = 0; i < 4; ++i) {
    if (generatedNumber[i] in compNumber || enteredNumber[i] in playerNumber) {
      return undefined;
    } else {
      compNumber[generatedNumber[i]] = true;
      playerNumber[enteredNumber[i]] = true;
    }

    if (generatedNumber[i] === enteredNumber[i]) {
      ++bulls;
    } else {
      compSoleNumber[generatedNumber[i]] = true;
      playerSoleNumber[enteredNumber[i]] = true;
    }
  }

  for (const val in compSoleNumber) {
    if (val in playerSoleNumber) {
      ++cows;
    }
  }

  return {
    'bulls': bulls, 'cows': cows,
  };
}

module.exports = bullsAndCows;
